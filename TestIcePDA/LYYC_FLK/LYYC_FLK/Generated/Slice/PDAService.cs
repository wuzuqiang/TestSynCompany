// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `PDAService.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


using _System = global::System;
using _Microsoft = global::Microsoft;

#pragma warning disable 1591

namespace PDA
{
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface PDAService : Ice.Object, PDAServiceOperations_, PDAServiceOperationsNC_
    {
    }
}

namespace PDA
{
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_PDAService_GetFacturers(string ret__);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_PDAService_ApplyStoreIn(string ret__);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_PDAService_ApplyStoreOut(string ret__);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_PDAService_ApplyRelocation(string ret__);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_PDAService_GetPalletByBarcode(string ret__);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_PDAService_GetMatchPalletPlan(string ret__);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_PDAService_GetMatchPalletPlanDetail(string ret__);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_PDAService_AddAssertedAndDetail(string ret__);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_PDAService_CreateAssortedBillByScanBarcode(string ret__);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_PDAService_GetAssortedBillByBarcode(string ret__);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_PDAService_GetFormulaOut(string ret__);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_PDAService_GetFormulaOutDetail(string ret__);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_PDAService_UpdateFormulaOutDetail(string ret__);
}

namespace PDA
{
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface PDAServicePrx : Ice.ObjectPrx
    {
        string GetFacturers();
        string GetFacturers(_System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<PDA.Callback_PDAService_GetFacturers> begin_GetFacturers();
        Ice.AsyncResult<PDA.Callback_PDAService_GetFacturers> begin_GetFacturers(_System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_GetFacturers(Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_GetFacturers(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        string end_GetFacturers(Ice.AsyncResult r__);

        string ApplyStoreIn(string productCode, string billTypeCode, string barcode, string inBatch);
        string ApplyStoreIn(string productCode, string billTypeCode, string barcode, string inBatch, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<PDA.Callback_PDAService_ApplyStoreIn> begin_ApplyStoreIn(string productCode, string billTypeCode, string barcode, string inBatch);
        Ice.AsyncResult<PDA.Callback_PDAService_ApplyStoreIn> begin_ApplyStoreIn(string productCode, string billTypeCode, string barcode, string inBatch, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_ApplyStoreIn(string productCode, string billTypeCode, string barcode, string inBatch, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_ApplyStoreIn(string productCode, string billTypeCode, string barcode, string inBatch, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        string end_ApplyStoreIn(Ice.AsyncResult r__);

        string ApplyStoreOut(string productCode, string billTypeCode, string barcode, string inBatch);
        string ApplyStoreOut(string productCode, string billTypeCode, string barcode, string inBatch, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<PDA.Callback_PDAService_ApplyStoreOut> begin_ApplyStoreOut(string productCode, string billTypeCode, string barcode, string inBatch);
        Ice.AsyncResult<PDA.Callback_PDAService_ApplyStoreOut> begin_ApplyStoreOut(string productCode, string billTypeCode, string barcode, string inBatch, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_ApplyStoreOut(string productCode, string billTypeCode, string barcode, string inBatch, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_ApplyStoreOut(string productCode, string billTypeCode, string barcode, string inBatch, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        string end_ApplyStoreOut(Ice.AsyncResult r__);

        string ApplyRelocation(string productCode, string billTypeCode, string barcode);
        string ApplyRelocation(string productCode, string billTypeCode, string barcode, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<PDA.Callback_PDAService_ApplyRelocation> begin_ApplyRelocation(string productCode, string billTypeCode, string barcode);
        Ice.AsyncResult<PDA.Callback_PDAService_ApplyRelocation> begin_ApplyRelocation(string productCode, string billTypeCode, string barcode, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_ApplyRelocation(string productCode, string billTypeCode, string barcode, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_ApplyRelocation(string productCode, string billTypeCode, string barcode, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        string end_ApplyRelocation(Ice.AsyncResult r__);

        string GetPalletByBarcode(string barcode);
        string GetPalletByBarcode(string barcode, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<PDA.Callback_PDAService_GetPalletByBarcode> begin_GetPalletByBarcode(string barcode);
        Ice.AsyncResult<PDA.Callback_PDAService_GetPalletByBarcode> begin_GetPalletByBarcode(string barcode, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_GetPalletByBarcode(string barcode, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_GetPalletByBarcode(string barcode, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        string end_GetPalletByBarcode(Ice.AsyncResult r__);

        string GetMatchPalletPlan(string matchPalletPlanNo, int page, int start, int limit, string sort, string filter);
        string GetMatchPalletPlan(string matchPalletPlanNo, int page, int start, int limit, string sort, string filter, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<PDA.Callback_PDAService_GetMatchPalletPlan> begin_GetMatchPalletPlan(string matchPalletPlanNo, int page, int start, int limit, string sort, string filter);
        Ice.AsyncResult<PDA.Callback_PDAService_GetMatchPalletPlan> begin_GetMatchPalletPlan(string matchPalletPlanNo, int page, int start, int limit, string sort, string filter, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_GetMatchPalletPlan(string matchPalletPlanNo, int page, int start, int limit, string sort, string filter, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_GetMatchPalletPlan(string matchPalletPlanNo, int page, int start, int limit, string sort, string filter, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        string end_GetMatchPalletPlan(Ice.AsyncResult r__);

        string GetMatchPalletPlanDetail(string matchPalletCode, int page, int start, int limit, string sort, string filter);
        string GetMatchPalletPlanDetail(string matchPalletCode, int page, int start, int limit, string sort, string filter, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<PDA.Callback_PDAService_GetMatchPalletPlanDetail> begin_GetMatchPalletPlanDetail(string matchPalletCode, int page, int start, int limit, string sort, string filter);
        Ice.AsyncResult<PDA.Callback_PDAService_GetMatchPalletPlanDetail> begin_GetMatchPalletPlanDetail(string matchPalletCode, int page, int start, int limit, string sort, string filter, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_GetMatchPalletPlanDetail(string matchPalletCode, int page, int start, int limit, string sort, string filter, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_GetMatchPalletPlanDetail(string matchPalletCode, int page, int start, int limit, string sort, string filter, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        string end_GetMatchPalletPlanDetail(Ice.AsyncResult r__);

        string AddAssertedAndDetail(string mathPalletCode, string barCode, string matchPalletPlanNo, string productBarCodes);
        string AddAssertedAndDetail(string mathPalletCode, string barCode, string matchPalletPlanNo, string productBarCodes, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<PDA.Callback_PDAService_AddAssertedAndDetail> begin_AddAssertedAndDetail(string mathPalletCode, string barCode, string matchPalletPlanNo, string productBarCodes);
        Ice.AsyncResult<PDA.Callback_PDAService_AddAssertedAndDetail> begin_AddAssertedAndDetail(string mathPalletCode, string barCode, string matchPalletPlanNo, string productBarCodes, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_AddAssertedAndDetail(string mathPalletCode, string barCode, string matchPalletPlanNo, string productBarCodes, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_AddAssertedAndDetail(string mathPalletCode, string barCode, string matchPalletPlanNo, string productBarCodes, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        string end_AddAssertedAndDetail(Ice.AsyncResult r__);

        string CreateAssortedBillByScanBarcode(string uniqueId, string matchPalletCode, string matchPalletPlanNo, string assortedProductModels);
        string CreateAssortedBillByScanBarcode(string uniqueId, string matchPalletCode, string matchPalletPlanNo, string assortedProductModels, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<PDA.Callback_PDAService_CreateAssortedBillByScanBarcode> begin_CreateAssortedBillByScanBarcode(string uniqueId, string matchPalletCode, string matchPalletPlanNo, string assortedProductModels);
        Ice.AsyncResult<PDA.Callback_PDAService_CreateAssortedBillByScanBarcode> begin_CreateAssortedBillByScanBarcode(string uniqueId, string matchPalletCode, string matchPalletPlanNo, string assortedProductModels, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_CreateAssortedBillByScanBarcode(string uniqueId, string matchPalletCode, string matchPalletPlanNo, string assortedProductModels, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_CreateAssortedBillByScanBarcode(string uniqueId, string matchPalletCode, string matchPalletPlanNo, string assortedProductModels, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        string end_CreateAssortedBillByScanBarcode(Ice.AsyncResult r__);

        string GetAssortedBillByBarcode(string barcode);
        string GetAssortedBillByBarcode(string barcode, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<PDA.Callback_PDAService_GetAssortedBillByBarcode> begin_GetAssortedBillByBarcode(string barcode);
        Ice.AsyncResult<PDA.Callback_PDAService_GetAssortedBillByBarcode> begin_GetAssortedBillByBarcode(string barcode, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_GetAssortedBillByBarcode(string barcode, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_GetAssortedBillByBarcode(string barcode, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        string end_GetAssortedBillByBarcode(Ice.AsyncResult r__);

        string GetFormulaOut(string formulaCode, int page, int start, int limit, string sort, string filter);
        string GetFormulaOut(string formulaCode, int page, int start, int limit, string sort, string filter, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<PDA.Callback_PDAService_GetFormulaOut> begin_GetFormulaOut(string formulaCode, int page, int start, int limit, string sort, string filter);
        Ice.AsyncResult<PDA.Callback_PDAService_GetFormulaOut> begin_GetFormulaOut(string formulaCode, int page, int start, int limit, string sort, string filter, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_GetFormulaOut(string formulaCode, int page, int start, int limit, string sort, string filter, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_GetFormulaOut(string formulaCode, int page, int start, int limit, string sort, string filter, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        string end_GetFormulaOut(Ice.AsyncResult r__);

        string GetFormulaOutDetail(string formulaCode);
        string GetFormulaOutDetail(string formulaCode, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<PDA.Callback_PDAService_GetFormulaOutDetail> begin_GetFormulaOutDetail(string formulaCode);
        Ice.AsyncResult<PDA.Callback_PDAService_GetFormulaOutDetail> begin_GetFormulaOutDetail(string formulaCode, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_GetFormulaOutDetail(string formulaCode, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_GetFormulaOutDetail(string formulaCode, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        string end_GetFormulaOutDetail(Ice.AsyncResult r__);

        string UpdateFormulaOutDetail(string formulaCode, string data);
        string UpdateFormulaOutDetail(string formulaCode, string data, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<PDA.Callback_PDAService_UpdateFormulaOutDetail> begin_UpdateFormulaOutDetail(string formulaCode, string data);
        Ice.AsyncResult<PDA.Callback_PDAService_UpdateFormulaOutDetail> begin_UpdateFormulaOutDetail(string formulaCode, string data, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_UpdateFormulaOutDetail(string formulaCode, string data, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_UpdateFormulaOutDetail(string formulaCode, string data, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        string end_UpdateFormulaOutDetail(Ice.AsyncResult r__);
    }
}

namespace PDA
{
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface PDAServiceOperations_
    {
        string GetFacturers(Ice.Current current__);

        string ApplyStoreIn(string productCode, string billTypeCode, string barcode, string inBatch, Ice.Current current__);

        string ApplyStoreOut(string productCode, string billTypeCode, string barcode, string inBatch, Ice.Current current__);

        string ApplyRelocation(string productCode, string billTypeCode, string barcode, Ice.Current current__);

        string GetPalletByBarcode(string barcode, Ice.Current current__);

        string GetMatchPalletPlan(string matchPalletPlanNo, int page, int start, int limit, string sort, string filter, Ice.Current current__);

        string GetMatchPalletPlanDetail(string matchPalletCode, int page, int start, int limit, string sort, string filter, Ice.Current current__);

        string AddAssertedAndDetail(string mathPalletCode, string barCode, string matchPalletPlanNo, string productBarCodes, Ice.Current current__);

        string CreateAssortedBillByScanBarcode(string uniqueId, string matchPalletCode, string matchPalletPlanNo, string assortedProductModels, Ice.Current current__);

        string GetAssortedBillByBarcode(string barcode, Ice.Current current__);

        string GetFormulaOut(string formulaCode, int page, int start, int limit, string sort, string filter, Ice.Current current__);

        string GetFormulaOutDetail(string formulaCode, Ice.Current current__);

        string UpdateFormulaOutDetail(string formulaCode, string data, Ice.Current current__);
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface PDAServiceOperationsNC_
    {
        string GetFacturers();

        string ApplyStoreIn(string productCode, string billTypeCode, string barcode, string inBatch);

        string ApplyStoreOut(string productCode, string billTypeCode, string barcode, string inBatch);

        string ApplyRelocation(string productCode, string billTypeCode, string barcode);

        string GetPalletByBarcode(string barcode);

        string GetMatchPalletPlan(string matchPalletPlanNo, int page, int start, int limit, string sort, string filter);

        string GetMatchPalletPlanDetail(string matchPalletCode, int page, int start, int limit, string sort, string filter);

        string AddAssertedAndDetail(string mathPalletCode, string barCode, string matchPalletPlanNo, string productBarCodes);

        string CreateAssortedBillByScanBarcode(string uniqueId, string matchPalletCode, string matchPalletPlanNo, string assortedProductModels);

        string GetAssortedBillByBarcode(string barcode);

        string GetFormulaOut(string formulaCode, int page, int start, int limit, string sort, string filter);

        string GetFormulaOutDetail(string formulaCode);

        string UpdateFormulaOutDetail(string formulaCode, string data);
    }
}

namespace PDA
{
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public sealed class taskStringsHelper
    {
        public static void write(IceInternal.BasicStream os__, string[] v__)
        {
            os__.writeStringSeq(v__);
        }

        public static string[] read(IceInternal.BasicStream is__)
        {
            string[] v__;
            v__ = is__.readStringSeq();
            return v__;
        }
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public sealed class PDAServicePrxHelper : Ice.ObjectPrxHelperBase, PDAServicePrx
    {
        #region Synchronous operations

        public string AddAssertedAndDetail(string mathPalletCode, string barCode, string matchPalletPlanNo, string productBarCodes)
        {
            return AddAssertedAndDetail(mathPalletCode, barCode, matchPalletPlanNo, productBarCodes, null, false);
        }

        public string AddAssertedAndDetail(string mathPalletCode, string barCode, string matchPalletPlanNo, string productBarCodes, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return AddAssertedAndDetail(mathPalletCode, barCode, matchPalletPlanNo, productBarCodes, context__, true);
        }

        private string AddAssertedAndDetail(string mathPalletCode, string barCode, string matchPalletPlanNo, string productBarCodes, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("AddAssertedAndDetail");
                    delBase__ = getDelegate__(false);
                    PDAServiceDel_ del__ = (PDAServiceDel_)delBase__;
                    return del__.AddAssertedAndDetail(mathPalletCode, barCode, matchPalletPlanNo, productBarCodes, context__);
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapper__(delBase__, ex__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        public string ApplyRelocation(string productCode, string billTypeCode, string barcode)
        {
            return ApplyRelocation(productCode, billTypeCode, barcode, null, false);
        }

        public string ApplyRelocation(string productCode, string billTypeCode, string barcode, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return ApplyRelocation(productCode, billTypeCode, barcode, context__, true);
        }

        private string ApplyRelocation(string productCode, string billTypeCode, string barcode, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("ApplyRelocation");
                    delBase__ = getDelegate__(false);
                    PDAServiceDel_ del__ = (PDAServiceDel_)delBase__;
                    return del__.ApplyRelocation(productCode, billTypeCode, barcode, context__);
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapper__(delBase__, ex__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        public string ApplyStoreIn(string productCode, string billTypeCode, string barcode, string inBatch)
        {
            return ApplyStoreIn(productCode, billTypeCode, barcode, inBatch, null, false);
        }

        public string ApplyStoreIn(string productCode, string billTypeCode, string barcode, string inBatch, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return ApplyStoreIn(productCode, billTypeCode, barcode, inBatch, context__, true);
        }

        private string ApplyStoreIn(string productCode, string billTypeCode, string barcode, string inBatch, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("ApplyStoreIn");
                    delBase__ = getDelegate__(false);
                    PDAServiceDel_ del__ = (PDAServiceDel_)delBase__;
                    return del__.ApplyStoreIn(productCode, billTypeCode, barcode, inBatch, context__);
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapper__(delBase__, ex__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        public string ApplyStoreOut(string productCode, string billTypeCode, string barcode, string inBatch)
        {
            return ApplyStoreOut(productCode, billTypeCode, barcode, inBatch, null, false);
        }

        public string ApplyStoreOut(string productCode, string billTypeCode, string barcode, string inBatch, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return ApplyStoreOut(productCode, billTypeCode, barcode, inBatch, context__, true);
        }

        private string ApplyStoreOut(string productCode, string billTypeCode, string barcode, string inBatch, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("ApplyStoreOut");
                    delBase__ = getDelegate__(false);
                    PDAServiceDel_ del__ = (PDAServiceDel_)delBase__;
                    return del__.ApplyStoreOut(productCode, billTypeCode, barcode, inBatch, context__);
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapper__(delBase__, ex__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        public string CreateAssortedBillByScanBarcode(string uniqueId, string matchPalletCode, string matchPalletPlanNo, string assortedProductModels)
        {
            return CreateAssortedBillByScanBarcode(uniqueId, matchPalletCode, matchPalletPlanNo, assortedProductModels, null, false);
        }

        public string CreateAssortedBillByScanBarcode(string uniqueId, string matchPalletCode, string matchPalletPlanNo, string assortedProductModels, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return CreateAssortedBillByScanBarcode(uniqueId, matchPalletCode, matchPalletPlanNo, assortedProductModels, context__, true);
        }

        private string CreateAssortedBillByScanBarcode(string uniqueId, string matchPalletCode, string matchPalletPlanNo, string assortedProductModels, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("CreateAssortedBillByScanBarcode");
                    delBase__ = getDelegate__(false);
                    PDAServiceDel_ del__ = (PDAServiceDel_)delBase__;
                    return del__.CreateAssortedBillByScanBarcode(uniqueId, matchPalletCode, matchPalletPlanNo, assortedProductModels, context__);
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapper__(delBase__, ex__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        public string GetAssortedBillByBarcode(string barcode)
        {
            return GetAssortedBillByBarcode(barcode, null, false);
        }

        public string GetAssortedBillByBarcode(string barcode, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return GetAssortedBillByBarcode(barcode, context__, true);
        }

        private string GetAssortedBillByBarcode(string barcode, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("GetAssortedBillByBarcode");
                    delBase__ = getDelegate__(false);
                    PDAServiceDel_ del__ = (PDAServiceDel_)delBase__;
                    return del__.GetAssortedBillByBarcode(barcode, context__);
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapperRelaxed__(delBase__, ex__, true, ref cnt__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        public string GetFacturers()
        {
            return GetFacturers(null, false);
        }

        public string GetFacturers(_System.Collections.Generic.Dictionary<string, string> context__)
        {
            return GetFacturers(context__, true);
        }

        private string GetFacturers(_System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("GetFacturers");
                    delBase__ = getDelegate__(false);
                    PDAServiceDel_ del__ = (PDAServiceDel_)delBase__;
                    return del__.GetFacturers(context__);
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapperRelaxed__(delBase__, ex__, true, ref cnt__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        public string GetFormulaOut(string formulaCode, int page, int start, int limit, string sort, string filter)
        {
            return GetFormulaOut(formulaCode, page, start, limit, sort, filter, null, false);
        }

        public string GetFormulaOut(string formulaCode, int page, int start, int limit, string sort, string filter, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return GetFormulaOut(formulaCode, page, start, limit, sort, filter, context__, true);
        }

        private string GetFormulaOut(string formulaCode, int page, int start, int limit, string sort, string filter, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("GetFormulaOut");
                    delBase__ = getDelegate__(false);
                    PDAServiceDel_ del__ = (PDAServiceDel_)delBase__;
                    return del__.GetFormulaOut(formulaCode, page, start, limit, sort, filter, context__);
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapperRelaxed__(delBase__, ex__, true, ref cnt__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        public string GetFormulaOutDetail(string formulaCode)
        {
            return GetFormulaOutDetail(formulaCode, null, false);
        }

        public string GetFormulaOutDetail(string formulaCode, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return GetFormulaOutDetail(formulaCode, context__, true);
        }

        private string GetFormulaOutDetail(string formulaCode, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("GetFormulaOutDetail");
                    delBase__ = getDelegate__(false);
                    PDAServiceDel_ del__ = (PDAServiceDel_)delBase__;
                    return del__.GetFormulaOutDetail(formulaCode, context__);
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapperRelaxed__(delBase__, ex__, true, ref cnt__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        public string GetMatchPalletPlan(string matchPalletPlanNo, int page, int start, int limit, string sort, string filter)
        {
            return GetMatchPalletPlan(matchPalletPlanNo, page, start, limit, sort, filter, null, false);
        }

        public string GetMatchPalletPlan(string matchPalletPlanNo, int page, int start, int limit, string sort, string filter, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return GetMatchPalletPlan(matchPalletPlanNo, page, start, limit, sort, filter, context__, true);
        }

        private string GetMatchPalletPlan(string matchPalletPlanNo, int page, int start, int limit, string sort, string filter, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("GetMatchPalletPlan");
                    delBase__ = getDelegate__(false);
                    PDAServiceDel_ del__ = (PDAServiceDel_)delBase__;
                    return del__.GetMatchPalletPlan(matchPalletPlanNo, page, start, limit, sort, filter, context__);
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapperRelaxed__(delBase__, ex__, true, ref cnt__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        public string GetMatchPalletPlanDetail(string matchPalletCode, int page, int start, int limit, string sort, string filter)
        {
            return GetMatchPalletPlanDetail(matchPalletCode, page, start, limit, sort, filter, null, false);
        }

        public string GetMatchPalletPlanDetail(string matchPalletCode, int page, int start, int limit, string sort, string filter, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return GetMatchPalletPlanDetail(matchPalletCode, page, start, limit, sort, filter, context__, true);
        }

        private string GetMatchPalletPlanDetail(string matchPalletCode, int page, int start, int limit, string sort, string filter, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("GetMatchPalletPlanDetail");
                    delBase__ = getDelegate__(false);
                    PDAServiceDel_ del__ = (PDAServiceDel_)delBase__;
                    return del__.GetMatchPalletPlanDetail(matchPalletCode, page, start, limit, sort, filter, context__);
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapperRelaxed__(delBase__, ex__, true, ref cnt__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        public string GetPalletByBarcode(string barcode)
        {
            return GetPalletByBarcode(barcode, null, false);
        }

        public string GetPalletByBarcode(string barcode, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return GetPalletByBarcode(barcode, context__, true);
        }

        private string GetPalletByBarcode(string barcode, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("GetPalletByBarcode");
                    delBase__ = getDelegate__(false);
                    PDAServiceDel_ del__ = (PDAServiceDel_)delBase__;
                    return del__.GetPalletByBarcode(barcode, context__);
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapperRelaxed__(delBase__, ex__, true, ref cnt__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        public string UpdateFormulaOutDetail(string formulaCode, string data)
        {
            return UpdateFormulaOutDetail(formulaCode, data, null, false);
        }

        public string UpdateFormulaOutDetail(string formulaCode, string data, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return UpdateFormulaOutDetail(formulaCode, data, context__, true);
        }

        private string UpdateFormulaOutDetail(string formulaCode, string data, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("UpdateFormulaOutDetail");
                    delBase__ = getDelegate__(false);
                    PDAServiceDel_ del__ = (PDAServiceDel_)delBase__;
                    return del__.UpdateFormulaOutDetail(formulaCode, data, context__);
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapper__(delBase__, ex__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        #endregion

        #region Asynchronous operations

        public Ice.AsyncResult<PDA.Callback_PDAService_AddAssertedAndDetail> begin_AddAssertedAndDetail(string mathPalletCode, string barCode, string matchPalletPlanNo, string productBarCodes)
        {
            return begin_AddAssertedAndDetail(mathPalletCode, barCode, matchPalletPlanNo, productBarCodes, null, false, null, null);
        }

        public Ice.AsyncResult<PDA.Callback_PDAService_AddAssertedAndDetail> begin_AddAssertedAndDetail(string mathPalletCode, string barCode, string matchPalletPlanNo, string productBarCodes, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_AddAssertedAndDetail(mathPalletCode, barCode, matchPalletPlanNo, productBarCodes, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_AddAssertedAndDetail(string mathPalletCode, string barCode, string matchPalletPlanNo, string productBarCodes, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_AddAssertedAndDetail(mathPalletCode, barCode, matchPalletPlanNo, productBarCodes, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_AddAssertedAndDetail(string mathPalletCode, string barCode, string matchPalletPlanNo, string productBarCodes, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_AddAssertedAndDetail(mathPalletCode, barCode, matchPalletPlanNo, productBarCodes, ctx__, true, cb__, cookie__);
        }

        private const string __AddAssertedAndDetail_name = "AddAssertedAndDetail";

        public string end_AddAssertedAndDetail(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __AddAssertedAndDetail_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
            string ret__;
            IceInternal.BasicStream is__ = outAsync__.istr__;
            is__.startReadEncaps();
            ret__ = is__.readString();
            is__.endReadEncaps();
            return ret__;
        }

        private Ice.AsyncResult<PDA.Callback_PDAService_AddAssertedAndDetail> begin_AddAssertedAndDetail(string mathPalletCode, string barCode, string matchPalletPlanNo, string productBarCodes, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__AddAssertedAndDetail_name);
            IceInternal.TwowayOutgoingAsync<PDA.Callback_PDAService_AddAssertedAndDetail> result__ =  new IceInternal.TwowayOutgoingAsync<PDA.Callback_PDAService_AddAssertedAndDetail>(this, __AddAssertedAndDetail_name, AddAssertedAndDetail_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__AddAssertedAndDetail_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.writeString(mathPalletCode);
                os__.writeString(barCode);
                os__.writeString(matchPalletPlanNo);
                os__.writeString(productBarCodes);
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void AddAssertedAndDetail_completed__(Ice.AsyncResult r__, PDA.Callback_PDAService_AddAssertedAndDetail cb__, Ice.ExceptionCallback excb__)
        {
            string ret__;
            try
            {
                ret__ = end_AddAssertedAndDetail(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__);
            }
        }

        public Ice.AsyncResult<PDA.Callback_PDAService_ApplyRelocation> begin_ApplyRelocation(string productCode, string billTypeCode, string barcode)
        {
            return begin_ApplyRelocation(productCode, billTypeCode, barcode, null, false, null, null);
        }

        public Ice.AsyncResult<PDA.Callback_PDAService_ApplyRelocation> begin_ApplyRelocation(string productCode, string billTypeCode, string barcode, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_ApplyRelocation(productCode, billTypeCode, barcode, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_ApplyRelocation(string productCode, string billTypeCode, string barcode, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_ApplyRelocation(productCode, billTypeCode, barcode, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_ApplyRelocation(string productCode, string billTypeCode, string barcode, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_ApplyRelocation(productCode, billTypeCode, barcode, ctx__, true, cb__, cookie__);
        }

        private const string __ApplyRelocation_name = "ApplyRelocation";

        public string end_ApplyRelocation(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __ApplyRelocation_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
            string ret__;
            IceInternal.BasicStream is__ = outAsync__.istr__;
            is__.startReadEncaps();
            ret__ = is__.readString();
            is__.endReadEncaps();
            return ret__;
        }

        private Ice.AsyncResult<PDA.Callback_PDAService_ApplyRelocation> begin_ApplyRelocation(string productCode, string billTypeCode, string barcode, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__ApplyRelocation_name);
            IceInternal.TwowayOutgoingAsync<PDA.Callback_PDAService_ApplyRelocation> result__ =  new IceInternal.TwowayOutgoingAsync<PDA.Callback_PDAService_ApplyRelocation>(this, __ApplyRelocation_name, ApplyRelocation_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__ApplyRelocation_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.writeString(productCode);
                os__.writeString(billTypeCode);
                os__.writeString(barcode);
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void ApplyRelocation_completed__(Ice.AsyncResult r__, PDA.Callback_PDAService_ApplyRelocation cb__, Ice.ExceptionCallback excb__)
        {
            string ret__;
            try
            {
                ret__ = end_ApplyRelocation(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__);
            }
        }

        public Ice.AsyncResult<PDA.Callback_PDAService_ApplyStoreIn> begin_ApplyStoreIn(string productCode, string billTypeCode, string barcode, string inBatch)
        {
            return begin_ApplyStoreIn(productCode, billTypeCode, barcode, inBatch, null, false, null, null);
        }

        public Ice.AsyncResult<PDA.Callback_PDAService_ApplyStoreIn> begin_ApplyStoreIn(string productCode, string billTypeCode, string barcode, string inBatch, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_ApplyStoreIn(productCode, billTypeCode, barcode, inBatch, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_ApplyStoreIn(string productCode, string billTypeCode, string barcode, string inBatch, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_ApplyStoreIn(productCode, billTypeCode, barcode, inBatch, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_ApplyStoreIn(string productCode, string billTypeCode, string barcode, string inBatch, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_ApplyStoreIn(productCode, billTypeCode, barcode, inBatch, ctx__, true, cb__, cookie__);
        }

        private const string __ApplyStoreIn_name = "ApplyStoreIn";

        public string end_ApplyStoreIn(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __ApplyStoreIn_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
            string ret__;
            IceInternal.BasicStream is__ = outAsync__.istr__;
            is__.startReadEncaps();
            ret__ = is__.readString();
            is__.endReadEncaps();
            return ret__;
        }

        private Ice.AsyncResult<PDA.Callback_PDAService_ApplyStoreIn> begin_ApplyStoreIn(string productCode, string billTypeCode, string barcode, string inBatch, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__ApplyStoreIn_name);
            IceInternal.TwowayOutgoingAsync<PDA.Callback_PDAService_ApplyStoreIn> result__ =  new IceInternal.TwowayOutgoingAsync<PDA.Callback_PDAService_ApplyStoreIn>(this, __ApplyStoreIn_name, ApplyStoreIn_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__ApplyStoreIn_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.writeString(productCode);
                os__.writeString(billTypeCode);
                os__.writeString(barcode);
                os__.writeString(inBatch);
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void ApplyStoreIn_completed__(Ice.AsyncResult r__, PDA.Callback_PDAService_ApplyStoreIn cb__, Ice.ExceptionCallback excb__)
        {
            string ret__;
            try
            {
                ret__ = end_ApplyStoreIn(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__);
            }
        }

        public Ice.AsyncResult<PDA.Callback_PDAService_ApplyStoreOut> begin_ApplyStoreOut(string productCode, string billTypeCode, string barcode, string inBatch)
        {
            return begin_ApplyStoreOut(productCode, billTypeCode, barcode, inBatch, null, false, null, null);
        }

        public Ice.AsyncResult<PDA.Callback_PDAService_ApplyStoreOut> begin_ApplyStoreOut(string productCode, string billTypeCode, string barcode, string inBatch, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_ApplyStoreOut(productCode, billTypeCode, barcode, inBatch, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_ApplyStoreOut(string productCode, string billTypeCode, string barcode, string inBatch, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_ApplyStoreOut(productCode, billTypeCode, barcode, inBatch, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_ApplyStoreOut(string productCode, string billTypeCode, string barcode, string inBatch, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_ApplyStoreOut(productCode, billTypeCode, barcode, inBatch, ctx__, true, cb__, cookie__);
        }

        private const string __ApplyStoreOut_name = "ApplyStoreOut";

        public string end_ApplyStoreOut(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __ApplyStoreOut_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
            string ret__;
            IceInternal.BasicStream is__ = outAsync__.istr__;
            is__.startReadEncaps();
            ret__ = is__.readString();
            is__.endReadEncaps();
            return ret__;
        }

        private Ice.AsyncResult<PDA.Callback_PDAService_ApplyStoreOut> begin_ApplyStoreOut(string productCode, string billTypeCode, string barcode, string inBatch, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__ApplyStoreOut_name);
            IceInternal.TwowayOutgoingAsync<PDA.Callback_PDAService_ApplyStoreOut> result__ =  new IceInternal.TwowayOutgoingAsync<PDA.Callback_PDAService_ApplyStoreOut>(this, __ApplyStoreOut_name, ApplyStoreOut_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__ApplyStoreOut_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.writeString(productCode);
                os__.writeString(billTypeCode);
                os__.writeString(barcode);
                os__.writeString(inBatch);
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void ApplyStoreOut_completed__(Ice.AsyncResult r__, PDA.Callback_PDAService_ApplyStoreOut cb__, Ice.ExceptionCallback excb__)
        {
            string ret__;
            try
            {
                ret__ = end_ApplyStoreOut(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__);
            }
        }

        public Ice.AsyncResult<PDA.Callback_PDAService_CreateAssortedBillByScanBarcode> begin_CreateAssortedBillByScanBarcode(string uniqueId, string matchPalletCode, string matchPalletPlanNo, string assortedProductModels)
        {
            return begin_CreateAssortedBillByScanBarcode(uniqueId, matchPalletCode, matchPalletPlanNo, assortedProductModels, null, false, null, null);
        }

        public Ice.AsyncResult<PDA.Callback_PDAService_CreateAssortedBillByScanBarcode> begin_CreateAssortedBillByScanBarcode(string uniqueId, string matchPalletCode, string matchPalletPlanNo, string assortedProductModels, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_CreateAssortedBillByScanBarcode(uniqueId, matchPalletCode, matchPalletPlanNo, assortedProductModels, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_CreateAssortedBillByScanBarcode(string uniqueId, string matchPalletCode, string matchPalletPlanNo, string assortedProductModels, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_CreateAssortedBillByScanBarcode(uniqueId, matchPalletCode, matchPalletPlanNo, assortedProductModels, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_CreateAssortedBillByScanBarcode(string uniqueId, string matchPalletCode, string matchPalletPlanNo, string assortedProductModels, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_CreateAssortedBillByScanBarcode(uniqueId, matchPalletCode, matchPalletPlanNo, assortedProductModels, ctx__, true, cb__, cookie__);
        }

        private const string __CreateAssortedBillByScanBarcode_name = "CreateAssortedBillByScanBarcode";

        public string end_CreateAssortedBillByScanBarcode(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __CreateAssortedBillByScanBarcode_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
            string ret__;
            IceInternal.BasicStream is__ = outAsync__.istr__;
            is__.startReadEncaps();
            ret__ = is__.readString();
            is__.endReadEncaps();
            return ret__;
        }

        private Ice.AsyncResult<PDA.Callback_PDAService_CreateAssortedBillByScanBarcode> begin_CreateAssortedBillByScanBarcode(string uniqueId, string matchPalletCode, string matchPalletPlanNo, string assortedProductModels, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__CreateAssortedBillByScanBarcode_name);
            IceInternal.TwowayOutgoingAsync<PDA.Callback_PDAService_CreateAssortedBillByScanBarcode> result__ =  new IceInternal.TwowayOutgoingAsync<PDA.Callback_PDAService_CreateAssortedBillByScanBarcode>(this, __CreateAssortedBillByScanBarcode_name, CreateAssortedBillByScanBarcode_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__CreateAssortedBillByScanBarcode_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.writeString(uniqueId);
                os__.writeString(matchPalletCode);
                os__.writeString(matchPalletPlanNo);
                os__.writeString(assortedProductModels);
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void CreateAssortedBillByScanBarcode_completed__(Ice.AsyncResult r__, PDA.Callback_PDAService_CreateAssortedBillByScanBarcode cb__, Ice.ExceptionCallback excb__)
        {
            string ret__;
            try
            {
                ret__ = end_CreateAssortedBillByScanBarcode(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__);
            }
        }

        public Ice.AsyncResult<PDA.Callback_PDAService_GetAssortedBillByBarcode> begin_GetAssortedBillByBarcode(string barcode)
        {
            return begin_GetAssortedBillByBarcode(barcode, null, false, null, null);
        }

        public Ice.AsyncResult<PDA.Callback_PDAService_GetAssortedBillByBarcode> begin_GetAssortedBillByBarcode(string barcode, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_GetAssortedBillByBarcode(barcode, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_GetAssortedBillByBarcode(string barcode, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_GetAssortedBillByBarcode(barcode, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_GetAssortedBillByBarcode(string barcode, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_GetAssortedBillByBarcode(barcode, ctx__, true, cb__, cookie__);
        }

        private const string __GetAssortedBillByBarcode_name = "GetAssortedBillByBarcode";

        public string end_GetAssortedBillByBarcode(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __GetAssortedBillByBarcode_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
            string ret__;
            IceInternal.BasicStream is__ = outAsync__.istr__;
            is__.startReadEncaps();
            ret__ = is__.readString();
            is__.endReadEncaps();
            return ret__;
        }

        private Ice.AsyncResult<PDA.Callback_PDAService_GetAssortedBillByBarcode> begin_GetAssortedBillByBarcode(string barcode, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__GetAssortedBillByBarcode_name);
            IceInternal.TwowayOutgoingAsync<PDA.Callback_PDAService_GetAssortedBillByBarcode> result__ =  new IceInternal.TwowayOutgoingAsync<PDA.Callback_PDAService_GetAssortedBillByBarcode>(this, __GetAssortedBillByBarcode_name, GetAssortedBillByBarcode_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__GetAssortedBillByBarcode_name, Ice.OperationMode.Idempotent, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.writeString(barcode);
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void GetAssortedBillByBarcode_completed__(Ice.AsyncResult r__, PDA.Callback_PDAService_GetAssortedBillByBarcode cb__, Ice.ExceptionCallback excb__)
        {
            string ret__;
            try
            {
                ret__ = end_GetAssortedBillByBarcode(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__);
            }
        }

        public Ice.AsyncResult<PDA.Callback_PDAService_GetFacturers> begin_GetFacturers()
        {
            return begin_GetFacturers(null, false, null, null);
        }

        public Ice.AsyncResult<PDA.Callback_PDAService_GetFacturers> begin_GetFacturers(_System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_GetFacturers(ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_GetFacturers(Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_GetFacturers(null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_GetFacturers(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_GetFacturers(ctx__, true, cb__, cookie__);
        }

        private const string __GetFacturers_name = "GetFacturers";

        public string end_GetFacturers(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __GetFacturers_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
            string ret__;
            IceInternal.BasicStream is__ = outAsync__.istr__;
            is__.startReadEncaps();
            ret__ = is__.readString();
            is__.endReadEncaps();
            return ret__;
        }

        private Ice.AsyncResult<PDA.Callback_PDAService_GetFacturers> begin_GetFacturers(_System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__GetFacturers_name);
            IceInternal.TwowayOutgoingAsync<PDA.Callback_PDAService_GetFacturers> result__ =  new IceInternal.TwowayOutgoingAsync<PDA.Callback_PDAService_GetFacturers>(this, __GetFacturers_name, GetFacturers_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__GetFacturers_name, Ice.OperationMode.Idempotent, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void GetFacturers_completed__(Ice.AsyncResult r__, PDA.Callback_PDAService_GetFacturers cb__, Ice.ExceptionCallback excb__)
        {
            string ret__;
            try
            {
                ret__ = end_GetFacturers(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__);
            }
        }

        public Ice.AsyncResult<PDA.Callback_PDAService_GetFormulaOut> begin_GetFormulaOut(string formulaCode, int page, int start, int limit, string sort, string filter)
        {
            return begin_GetFormulaOut(formulaCode, page, start, limit, sort, filter, null, false, null, null);
        }

        public Ice.AsyncResult<PDA.Callback_PDAService_GetFormulaOut> begin_GetFormulaOut(string formulaCode, int page, int start, int limit, string sort, string filter, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_GetFormulaOut(formulaCode, page, start, limit, sort, filter, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_GetFormulaOut(string formulaCode, int page, int start, int limit, string sort, string filter, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_GetFormulaOut(formulaCode, page, start, limit, sort, filter, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_GetFormulaOut(string formulaCode, int page, int start, int limit, string sort, string filter, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_GetFormulaOut(formulaCode, page, start, limit, sort, filter, ctx__, true, cb__, cookie__);
        }

        private const string __GetFormulaOut_name = "GetFormulaOut";

        public string end_GetFormulaOut(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __GetFormulaOut_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
            string ret__;
            IceInternal.BasicStream is__ = outAsync__.istr__;
            is__.startReadEncaps();
            ret__ = is__.readString();
            is__.endReadEncaps();
            return ret__;
        }

        private Ice.AsyncResult<PDA.Callback_PDAService_GetFormulaOut> begin_GetFormulaOut(string formulaCode, int page, int start, int limit, string sort, string filter, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__GetFormulaOut_name);
            IceInternal.TwowayOutgoingAsync<PDA.Callback_PDAService_GetFormulaOut> result__ =  new IceInternal.TwowayOutgoingAsync<PDA.Callback_PDAService_GetFormulaOut>(this, __GetFormulaOut_name, GetFormulaOut_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__GetFormulaOut_name, Ice.OperationMode.Idempotent, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.writeString(formulaCode);
                os__.writeInt(page);
                os__.writeInt(start);
                os__.writeInt(limit);
                os__.writeString(sort);
                os__.writeString(filter);
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void GetFormulaOut_completed__(Ice.AsyncResult r__, PDA.Callback_PDAService_GetFormulaOut cb__, Ice.ExceptionCallback excb__)
        {
            string ret__;
            try
            {
                ret__ = end_GetFormulaOut(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__);
            }
        }

        public Ice.AsyncResult<PDA.Callback_PDAService_GetFormulaOutDetail> begin_GetFormulaOutDetail(string formulaCode)
        {
            return begin_GetFormulaOutDetail(formulaCode, null, false, null, null);
        }

        public Ice.AsyncResult<PDA.Callback_PDAService_GetFormulaOutDetail> begin_GetFormulaOutDetail(string formulaCode, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_GetFormulaOutDetail(formulaCode, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_GetFormulaOutDetail(string formulaCode, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_GetFormulaOutDetail(formulaCode, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_GetFormulaOutDetail(string formulaCode, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_GetFormulaOutDetail(formulaCode, ctx__, true, cb__, cookie__);
        }

        private const string __GetFormulaOutDetail_name = "GetFormulaOutDetail";

        public string end_GetFormulaOutDetail(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __GetFormulaOutDetail_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
            string ret__;
            IceInternal.BasicStream is__ = outAsync__.istr__;
            is__.startReadEncaps();
            ret__ = is__.readString();
            is__.endReadEncaps();
            return ret__;
        }

        private Ice.AsyncResult<PDA.Callback_PDAService_GetFormulaOutDetail> begin_GetFormulaOutDetail(string formulaCode, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__GetFormulaOutDetail_name);
            IceInternal.TwowayOutgoingAsync<PDA.Callback_PDAService_GetFormulaOutDetail> result__ =  new IceInternal.TwowayOutgoingAsync<PDA.Callback_PDAService_GetFormulaOutDetail>(this, __GetFormulaOutDetail_name, GetFormulaOutDetail_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__GetFormulaOutDetail_name, Ice.OperationMode.Idempotent, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.writeString(formulaCode);
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void GetFormulaOutDetail_completed__(Ice.AsyncResult r__, PDA.Callback_PDAService_GetFormulaOutDetail cb__, Ice.ExceptionCallback excb__)
        {
            string ret__;
            try
            {
                ret__ = end_GetFormulaOutDetail(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__);
            }
        }

        public Ice.AsyncResult<PDA.Callback_PDAService_GetMatchPalletPlan> begin_GetMatchPalletPlan(string matchPalletPlanNo, int page, int start, int limit, string sort, string filter)
        {
            return begin_GetMatchPalletPlan(matchPalletPlanNo, page, start, limit, sort, filter, null, false, null, null);
        }

        public Ice.AsyncResult<PDA.Callback_PDAService_GetMatchPalletPlan> begin_GetMatchPalletPlan(string matchPalletPlanNo, int page, int start, int limit, string sort, string filter, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_GetMatchPalletPlan(matchPalletPlanNo, page, start, limit, sort, filter, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_GetMatchPalletPlan(string matchPalletPlanNo, int page, int start, int limit, string sort, string filter, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_GetMatchPalletPlan(matchPalletPlanNo, page, start, limit, sort, filter, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_GetMatchPalletPlan(string matchPalletPlanNo, int page, int start, int limit, string sort, string filter, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_GetMatchPalletPlan(matchPalletPlanNo, page, start, limit, sort, filter, ctx__, true, cb__, cookie__);
        }

        private const string __GetMatchPalletPlan_name = "GetMatchPalletPlan";

        public string end_GetMatchPalletPlan(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __GetMatchPalletPlan_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
            string ret__;
            IceInternal.BasicStream is__ = outAsync__.istr__;
            is__.startReadEncaps();
            ret__ = is__.readString();
            is__.endReadEncaps();
            return ret__;
        }

        private Ice.AsyncResult<PDA.Callback_PDAService_GetMatchPalletPlan> begin_GetMatchPalletPlan(string matchPalletPlanNo, int page, int start, int limit, string sort, string filter, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__GetMatchPalletPlan_name);
            IceInternal.TwowayOutgoingAsync<PDA.Callback_PDAService_GetMatchPalletPlan> result__ =  new IceInternal.TwowayOutgoingAsync<PDA.Callback_PDAService_GetMatchPalletPlan>(this, __GetMatchPalletPlan_name, GetMatchPalletPlan_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__GetMatchPalletPlan_name, Ice.OperationMode.Idempotent, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.writeString(matchPalletPlanNo);
                os__.writeInt(page);
                os__.writeInt(start);
                os__.writeInt(limit);
                os__.writeString(sort);
                os__.writeString(filter);
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void GetMatchPalletPlan_completed__(Ice.AsyncResult r__, PDA.Callback_PDAService_GetMatchPalletPlan cb__, Ice.ExceptionCallback excb__)
        {
            string ret__;
            try
            {
                ret__ = end_GetMatchPalletPlan(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__);
            }
        }

        public Ice.AsyncResult<PDA.Callback_PDAService_GetMatchPalletPlanDetail> begin_GetMatchPalletPlanDetail(string matchPalletCode, int page, int start, int limit, string sort, string filter)
        {
            return begin_GetMatchPalletPlanDetail(matchPalletCode, page, start, limit, sort, filter, null, false, null, null);
        }

        public Ice.AsyncResult<PDA.Callback_PDAService_GetMatchPalletPlanDetail> begin_GetMatchPalletPlanDetail(string matchPalletCode, int page, int start, int limit, string sort, string filter, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_GetMatchPalletPlanDetail(matchPalletCode, page, start, limit, sort, filter, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_GetMatchPalletPlanDetail(string matchPalletCode, int page, int start, int limit, string sort, string filter, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_GetMatchPalletPlanDetail(matchPalletCode, page, start, limit, sort, filter, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_GetMatchPalletPlanDetail(string matchPalletCode, int page, int start, int limit, string sort, string filter, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_GetMatchPalletPlanDetail(matchPalletCode, page, start, limit, sort, filter, ctx__, true, cb__, cookie__);
        }

        private const string __GetMatchPalletPlanDetail_name = "GetMatchPalletPlanDetail";

        public string end_GetMatchPalletPlanDetail(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __GetMatchPalletPlanDetail_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
            string ret__;
            IceInternal.BasicStream is__ = outAsync__.istr__;
            is__.startReadEncaps();
            ret__ = is__.readString();
            is__.endReadEncaps();
            return ret__;
        }

        private Ice.AsyncResult<PDA.Callback_PDAService_GetMatchPalletPlanDetail> begin_GetMatchPalletPlanDetail(string matchPalletCode, int page, int start, int limit, string sort, string filter, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__GetMatchPalletPlanDetail_name);
            IceInternal.TwowayOutgoingAsync<PDA.Callback_PDAService_GetMatchPalletPlanDetail> result__ =  new IceInternal.TwowayOutgoingAsync<PDA.Callback_PDAService_GetMatchPalletPlanDetail>(this, __GetMatchPalletPlanDetail_name, GetMatchPalletPlanDetail_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__GetMatchPalletPlanDetail_name, Ice.OperationMode.Idempotent, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.writeString(matchPalletCode);
                os__.writeInt(page);
                os__.writeInt(start);
                os__.writeInt(limit);
                os__.writeString(sort);
                os__.writeString(filter);
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void GetMatchPalletPlanDetail_completed__(Ice.AsyncResult r__, PDA.Callback_PDAService_GetMatchPalletPlanDetail cb__, Ice.ExceptionCallback excb__)
        {
            string ret__;
            try
            {
                ret__ = end_GetMatchPalletPlanDetail(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__);
            }
        }

        public Ice.AsyncResult<PDA.Callback_PDAService_GetPalletByBarcode> begin_GetPalletByBarcode(string barcode)
        {
            return begin_GetPalletByBarcode(barcode, null, false, null, null);
        }

        public Ice.AsyncResult<PDA.Callback_PDAService_GetPalletByBarcode> begin_GetPalletByBarcode(string barcode, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_GetPalletByBarcode(barcode, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_GetPalletByBarcode(string barcode, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_GetPalletByBarcode(barcode, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_GetPalletByBarcode(string barcode, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_GetPalletByBarcode(barcode, ctx__, true, cb__, cookie__);
        }

        private const string __GetPalletByBarcode_name = "GetPalletByBarcode";

        public string end_GetPalletByBarcode(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __GetPalletByBarcode_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
            string ret__;
            IceInternal.BasicStream is__ = outAsync__.istr__;
            is__.startReadEncaps();
            ret__ = is__.readString();
            is__.endReadEncaps();
            return ret__;
        }

        private Ice.AsyncResult<PDA.Callback_PDAService_GetPalletByBarcode> begin_GetPalletByBarcode(string barcode, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__GetPalletByBarcode_name);
            IceInternal.TwowayOutgoingAsync<PDA.Callback_PDAService_GetPalletByBarcode> result__ =  new IceInternal.TwowayOutgoingAsync<PDA.Callback_PDAService_GetPalletByBarcode>(this, __GetPalletByBarcode_name, GetPalletByBarcode_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__GetPalletByBarcode_name, Ice.OperationMode.Idempotent, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.writeString(barcode);
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void GetPalletByBarcode_completed__(Ice.AsyncResult r__, PDA.Callback_PDAService_GetPalletByBarcode cb__, Ice.ExceptionCallback excb__)
        {
            string ret__;
            try
            {
                ret__ = end_GetPalletByBarcode(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__);
            }
        }

        public Ice.AsyncResult<PDA.Callback_PDAService_UpdateFormulaOutDetail> begin_UpdateFormulaOutDetail(string formulaCode, string data)
        {
            return begin_UpdateFormulaOutDetail(formulaCode, data, null, false, null, null);
        }

        public Ice.AsyncResult<PDA.Callback_PDAService_UpdateFormulaOutDetail> begin_UpdateFormulaOutDetail(string formulaCode, string data, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_UpdateFormulaOutDetail(formulaCode, data, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_UpdateFormulaOutDetail(string formulaCode, string data, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_UpdateFormulaOutDetail(formulaCode, data, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_UpdateFormulaOutDetail(string formulaCode, string data, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_UpdateFormulaOutDetail(formulaCode, data, ctx__, true, cb__, cookie__);
        }

        private const string __UpdateFormulaOutDetail_name = "UpdateFormulaOutDetail";

        public string end_UpdateFormulaOutDetail(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __UpdateFormulaOutDetail_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
            string ret__;
            IceInternal.BasicStream is__ = outAsync__.istr__;
            is__.startReadEncaps();
            ret__ = is__.readString();
            is__.endReadEncaps();
            return ret__;
        }

        private Ice.AsyncResult<PDA.Callback_PDAService_UpdateFormulaOutDetail> begin_UpdateFormulaOutDetail(string formulaCode, string data, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__UpdateFormulaOutDetail_name);
            IceInternal.TwowayOutgoingAsync<PDA.Callback_PDAService_UpdateFormulaOutDetail> result__ =  new IceInternal.TwowayOutgoingAsync<PDA.Callback_PDAService_UpdateFormulaOutDetail>(this, __UpdateFormulaOutDetail_name, UpdateFormulaOutDetail_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__UpdateFormulaOutDetail_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.writeString(formulaCode);
                os__.writeString(data);
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void UpdateFormulaOutDetail_completed__(Ice.AsyncResult r__, PDA.Callback_PDAService_UpdateFormulaOutDetail cb__, Ice.ExceptionCallback excb__)
        {
            string ret__;
            try
            {
                ret__ = end_UpdateFormulaOutDetail(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__);
            }
        }

        #endregion

        #region Checked and unchecked cast operations

        public static PDAServicePrx checkedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            PDAServicePrx r = b as PDAServicePrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                PDAServicePrxHelper h = new PDAServicePrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static PDAServicePrx checkedCast(Ice.ObjectPrx b, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            PDAServicePrx r = b as PDAServicePrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                PDAServicePrxHelper h = new PDAServicePrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static PDAServicePrx checkedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    PDAServicePrxHelper h = new PDAServicePrxHelper();
                    h.copyFrom__(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static PDAServicePrx checkedCast(Ice.ObjectPrx b, string f, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    PDAServicePrxHelper h = new PDAServicePrxHelper();
                    h.copyFrom__(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static PDAServicePrx uncheckedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            PDAServicePrx r = b as PDAServicePrx;
            if(r == null)
            {
                PDAServicePrxHelper h = new PDAServicePrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static PDAServicePrx uncheckedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            PDAServicePrxHelper h = new PDAServicePrxHelper();
            h.copyFrom__(bb);
            return h;
        }

        public static readonly string[] ids__ =
        {
            "::Ice::Object",
            "::PDA::PDAService"
        };

        public static string ice_staticId()
        {
            return ids__[1];
        }

        #endregion

        #region Marshaling support

        protected override Ice.ObjectDelM_ createDelegateM__()
        {
            return new PDAServiceDelM_();
        }

        protected override Ice.ObjectDelD_ createDelegateD__()
        {
            return new PDAServiceDelD_();
        }

        public static void write__(IceInternal.BasicStream os__, PDAServicePrx v__)
        {
            os__.writeProxy(v__);
        }

        public static PDAServicePrx read__(IceInternal.BasicStream is__)
        {
            Ice.ObjectPrx proxy = is__.readProxy();
            if(proxy != null)
            {
                PDAServicePrxHelper result = new PDAServicePrxHelper();
                result.copyFrom__(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }
}

namespace PDA
{
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface PDAServiceDel_ : Ice.ObjectDel_
    {
        string GetFacturers(_System.Collections.Generic.Dictionary<string, string> context__);

        string ApplyStoreIn(string productCode, string billTypeCode, string barcode, string inBatch, _System.Collections.Generic.Dictionary<string, string> context__);

        string ApplyStoreOut(string productCode, string billTypeCode, string barcode, string inBatch, _System.Collections.Generic.Dictionary<string, string> context__);

        string ApplyRelocation(string productCode, string billTypeCode, string barcode, _System.Collections.Generic.Dictionary<string, string> context__);

        string GetPalletByBarcode(string barcode, _System.Collections.Generic.Dictionary<string, string> context__);

        string GetMatchPalletPlan(string matchPalletPlanNo, int page, int start, int limit, string sort, string filter, _System.Collections.Generic.Dictionary<string, string> context__);

        string GetMatchPalletPlanDetail(string matchPalletCode, int page, int start, int limit, string sort, string filter, _System.Collections.Generic.Dictionary<string, string> context__);

        string AddAssertedAndDetail(string mathPalletCode, string barCode, string matchPalletPlanNo, string productBarCodes, _System.Collections.Generic.Dictionary<string, string> context__);

        string CreateAssortedBillByScanBarcode(string uniqueId, string matchPalletCode, string matchPalletPlanNo, string assortedProductModels, _System.Collections.Generic.Dictionary<string, string> context__);

        string GetAssortedBillByBarcode(string barcode, _System.Collections.Generic.Dictionary<string, string> context__);

        string GetFormulaOut(string formulaCode, int page, int start, int limit, string sort, string filter, _System.Collections.Generic.Dictionary<string, string> context__);

        string GetFormulaOutDetail(string formulaCode, _System.Collections.Generic.Dictionary<string, string> context__);

        string UpdateFormulaOutDetail(string formulaCode, string data, _System.Collections.Generic.Dictionary<string, string> context__);
    }
}

namespace PDA
{
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public sealed class PDAServiceDelM_ : Ice.ObjectDelM_, PDAServiceDel_
    {
        public string AddAssertedAndDetail(string mathPalletCode, string barCode, string matchPalletPlanNo, string productBarCodes, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("AddAssertedAndDetail", Ice.OperationMode.Normal, context__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.ostr();
                    os__.writeString(mathPalletCode);
                    os__.writeString(barCode);
                    os__.writeString(matchPalletPlanNo);
                    os__.writeString(productBarCodes);
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.istr();
                    is__.startReadEncaps();
                    string ret__;
                    ret__ = is__.readString();
                    is__.endReadEncaps();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public string ApplyRelocation(string productCode, string billTypeCode, string barcode, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("ApplyRelocation", Ice.OperationMode.Normal, context__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.ostr();
                    os__.writeString(productCode);
                    os__.writeString(billTypeCode);
                    os__.writeString(barcode);
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.istr();
                    is__.startReadEncaps();
                    string ret__;
                    ret__ = is__.readString();
                    is__.endReadEncaps();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public string ApplyStoreIn(string productCode, string billTypeCode, string barcode, string inBatch, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("ApplyStoreIn", Ice.OperationMode.Normal, context__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.ostr();
                    os__.writeString(productCode);
                    os__.writeString(billTypeCode);
                    os__.writeString(barcode);
                    os__.writeString(inBatch);
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.istr();
                    is__.startReadEncaps();
                    string ret__;
                    ret__ = is__.readString();
                    is__.endReadEncaps();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public string ApplyStoreOut(string productCode, string billTypeCode, string barcode, string inBatch, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("ApplyStoreOut", Ice.OperationMode.Normal, context__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.ostr();
                    os__.writeString(productCode);
                    os__.writeString(billTypeCode);
                    os__.writeString(barcode);
                    os__.writeString(inBatch);
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.istr();
                    is__.startReadEncaps();
                    string ret__;
                    ret__ = is__.readString();
                    is__.endReadEncaps();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public string CreateAssortedBillByScanBarcode(string uniqueId, string matchPalletCode, string matchPalletPlanNo, string assortedProductModels, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("CreateAssortedBillByScanBarcode", Ice.OperationMode.Normal, context__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.ostr();
                    os__.writeString(uniqueId);
                    os__.writeString(matchPalletCode);
                    os__.writeString(matchPalletPlanNo);
                    os__.writeString(assortedProductModels);
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.istr();
                    is__.startReadEncaps();
                    string ret__;
                    ret__ = is__.readString();
                    is__.endReadEncaps();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public string GetAssortedBillByBarcode(string barcode, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("GetAssortedBillByBarcode", Ice.OperationMode.Idempotent, context__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.ostr();
                    os__.writeString(barcode);
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.istr();
                    is__.startReadEncaps();
                    string ret__;
                    ret__ = is__.readString();
                    is__.endReadEncaps();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public string GetFacturers(_System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("GetFacturers", Ice.OperationMode.Idempotent, context__);
            try
            {
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.istr();
                    is__.startReadEncaps();
                    string ret__;
                    ret__ = is__.readString();
                    is__.endReadEncaps();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public string GetFormulaOut(string formulaCode, int page, int start, int limit, string sort, string filter, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("GetFormulaOut", Ice.OperationMode.Idempotent, context__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.ostr();
                    os__.writeString(formulaCode);
                    os__.writeInt(page);
                    os__.writeInt(start);
                    os__.writeInt(limit);
                    os__.writeString(sort);
                    os__.writeString(filter);
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.istr();
                    is__.startReadEncaps();
                    string ret__;
                    ret__ = is__.readString();
                    is__.endReadEncaps();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public string GetFormulaOutDetail(string formulaCode, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("GetFormulaOutDetail", Ice.OperationMode.Idempotent, context__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.ostr();
                    os__.writeString(formulaCode);
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.istr();
                    is__.startReadEncaps();
                    string ret__;
                    ret__ = is__.readString();
                    is__.endReadEncaps();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public string GetMatchPalletPlan(string matchPalletPlanNo, int page, int start, int limit, string sort, string filter, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("GetMatchPalletPlan", Ice.OperationMode.Idempotent, context__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.ostr();
                    os__.writeString(matchPalletPlanNo);
                    os__.writeInt(page);
                    os__.writeInt(start);
                    os__.writeInt(limit);
                    os__.writeString(sort);
                    os__.writeString(filter);
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.istr();
                    is__.startReadEncaps();
                    string ret__;
                    ret__ = is__.readString();
                    is__.endReadEncaps();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public string GetMatchPalletPlanDetail(string matchPalletCode, int page, int start, int limit, string sort, string filter, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("GetMatchPalletPlanDetail", Ice.OperationMode.Idempotent, context__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.ostr();
                    os__.writeString(matchPalletCode);
                    os__.writeInt(page);
                    os__.writeInt(start);
                    os__.writeInt(limit);
                    os__.writeString(sort);
                    os__.writeString(filter);
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.istr();
                    is__.startReadEncaps();
                    string ret__;
                    ret__ = is__.readString();
                    is__.endReadEncaps();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public string GetPalletByBarcode(string barcode, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("GetPalletByBarcode", Ice.OperationMode.Idempotent, context__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.ostr();
                    os__.writeString(barcode);
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.istr();
                    is__.startReadEncaps();
                    string ret__;
                    ret__ = is__.readString();
                    is__.endReadEncaps();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public string UpdateFormulaOutDetail(string formulaCode, string data, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("UpdateFormulaOutDetail", Ice.OperationMode.Normal, context__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.ostr();
                    os__.writeString(formulaCode);
                    os__.writeString(data);
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.istr();
                    is__.startReadEncaps();
                    string ret__;
                    ret__ = is__.readString();
                    is__.endReadEncaps();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }
    }
}

namespace PDA
{
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public sealed class PDAServiceDelD_ : Ice.ObjectDelD_, PDAServiceDel_
    {
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public string AddAssertedAndDetail(string mathPalletCode, string barCode, string matchPalletPlanNo, string productBarCodes, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "AddAssertedAndDetail", Ice.OperationMode.Normal, context__);
            string result__ = null;
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                PDAService servant__ = null;
                try
                {
                    servant__ = (PDAService)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                result__ = servant__.AddAssertedAndDetail(mathPalletCode, barCode, matchPalletPlanNo, productBarCodes, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.servant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            return result__;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public string ApplyRelocation(string productCode, string billTypeCode, string barcode, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "ApplyRelocation", Ice.OperationMode.Normal, context__);
            string result__ = null;
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                PDAService servant__ = null;
                try
                {
                    servant__ = (PDAService)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                result__ = servant__.ApplyRelocation(productCode, billTypeCode, barcode, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.servant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            return result__;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public string ApplyStoreIn(string productCode, string billTypeCode, string barcode, string inBatch, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "ApplyStoreIn", Ice.OperationMode.Normal, context__);
            string result__ = null;
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                PDAService servant__ = null;
                try
                {
                    servant__ = (PDAService)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                result__ = servant__.ApplyStoreIn(productCode, billTypeCode, barcode, inBatch, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.servant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            return result__;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public string ApplyStoreOut(string productCode, string billTypeCode, string barcode, string inBatch, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "ApplyStoreOut", Ice.OperationMode.Normal, context__);
            string result__ = null;
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                PDAService servant__ = null;
                try
                {
                    servant__ = (PDAService)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                result__ = servant__.ApplyStoreOut(productCode, billTypeCode, barcode, inBatch, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.servant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            return result__;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public string CreateAssortedBillByScanBarcode(string uniqueId, string matchPalletCode, string matchPalletPlanNo, string assortedProductModels, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "CreateAssortedBillByScanBarcode", Ice.OperationMode.Normal, context__);
            string result__ = null;
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                PDAService servant__ = null;
                try
                {
                    servant__ = (PDAService)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                result__ = servant__.CreateAssortedBillByScanBarcode(uniqueId, matchPalletCode, matchPalletPlanNo, assortedProductModels, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.servant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            return result__;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public string GetAssortedBillByBarcode(string barcode, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "GetAssortedBillByBarcode", Ice.OperationMode.Idempotent, context__);
            string result__ = null;
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                PDAService servant__ = null;
                try
                {
                    servant__ = (PDAService)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                result__ = servant__.GetAssortedBillByBarcode(barcode, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.servant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            return result__;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public string GetFacturers(_System.Collections.Generic.Dictionary<string, string> context__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "GetFacturers", Ice.OperationMode.Idempotent, context__);
            string result__ = null;
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                PDAService servant__ = null;
                try
                {
                    servant__ = (PDAService)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                result__ = servant__.GetFacturers(current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.servant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            return result__;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public string GetFormulaOut(string formulaCode, int page, int start, int limit, string sort, string filter, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "GetFormulaOut", Ice.OperationMode.Idempotent, context__);
            string result__ = null;
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                PDAService servant__ = null;
                try
                {
                    servant__ = (PDAService)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                result__ = servant__.GetFormulaOut(formulaCode, page, start, limit, sort, filter, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.servant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            return result__;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public string GetFormulaOutDetail(string formulaCode, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "GetFormulaOutDetail", Ice.OperationMode.Idempotent, context__);
            string result__ = null;
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                PDAService servant__ = null;
                try
                {
                    servant__ = (PDAService)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                result__ = servant__.GetFormulaOutDetail(formulaCode, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.servant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            return result__;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public string GetMatchPalletPlan(string matchPalletPlanNo, int page, int start, int limit, string sort, string filter, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "GetMatchPalletPlan", Ice.OperationMode.Idempotent, context__);
            string result__ = null;
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                PDAService servant__ = null;
                try
                {
                    servant__ = (PDAService)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                result__ = servant__.GetMatchPalletPlan(matchPalletPlanNo, page, start, limit, sort, filter, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.servant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            return result__;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public string GetMatchPalletPlanDetail(string matchPalletCode, int page, int start, int limit, string sort, string filter, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "GetMatchPalletPlanDetail", Ice.OperationMode.Idempotent, context__);
            string result__ = null;
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                PDAService servant__ = null;
                try
                {
                    servant__ = (PDAService)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                result__ = servant__.GetMatchPalletPlanDetail(matchPalletCode, page, start, limit, sort, filter, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.servant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            return result__;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public string GetPalletByBarcode(string barcode, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "GetPalletByBarcode", Ice.OperationMode.Idempotent, context__);
            string result__ = null;
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                PDAService servant__ = null;
                try
                {
                    servant__ = (PDAService)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                result__ = servant__.GetPalletByBarcode(barcode, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.servant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            return result__;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public string UpdateFormulaOutDetail(string formulaCode, string data, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "UpdateFormulaOutDetail", Ice.OperationMode.Normal, context__);
            string result__ = null;
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                PDAService servant__ = null;
                try
                {
                    servant__ = (PDAService)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                result__ = servant__.UpdateFormulaOutDetail(formulaCode, data, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.servant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            return result__;
        }
    }
}

namespace PDA
{
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public abstract class PDAServiceDisp_ : Ice.ObjectImpl, PDAService
    {
        #region Slice operations

        public string GetFacturers()
        {
            return GetFacturers(Ice.ObjectImpl.defaultCurrent);
        }

        public abstract string GetFacturers(Ice.Current current__);

        public string ApplyStoreIn(string productCode, string billTypeCode, string barcode, string inBatch)
        {
            return ApplyStoreIn(productCode, billTypeCode, barcode, inBatch, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract string ApplyStoreIn(string productCode, string billTypeCode, string barcode, string inBatch, Ice.Current current__);

        public string ApplyStoreOut(string productCode, string billTypeCode, string barcode, string inBatch)
        {
            return ApplyStoreOut(productCode, billTypeCode, barcode, inBatch, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract string ApplyStoreOut(string productCode, string billTypeCode, string barcode, string inBatch, Ice.Current current__);

        public string ApplyRelocation(string productCode, string billTypeCode, string barcode)
        {
            return ApplyRelocation(productCode, billTypeCode, barcode, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract string ApplyRelocation(string productCode, string billTypeCode, string barcode, Ice.Current current__);

        public string GetPalletByBarcode(string barcode)
        {
            return GetPalletByBarcode(barcode, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract string GetPalletByBarcode(string barcode, Ice.Current current__);

        public string GetMatchPalletPlan(string matchPalletPlanNo, int page, int start, int limit, string sort, string filter)
        {
            return GetMatchPalletPlan(matchPalletPlanNo, page, start, limit, sort, filter, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract string GetMatchPalletPlan(string matchPalletPlanNo, int page, int start, int limit, string sort, string filter, Ice.Current current__);

        public string GetMatchPalletPlanDetail(string matchPalletCode, int page, int start, int limit, string sort, string filter)
        {
            return GetMatchPalletPlanDetail(matchPalletCode, page, start, limit, sort, filter, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract string GetMatchPalletPlanDetail(string matchPalletCode, int page, int start, int limit, string sort, string filter, Ice.Current current__);

        public string AddAssertedAndDetail(string mathPalletCode, string barCode, string matchPalletPlanNo, string productBarCodes)
        {
            return AddAssertedAndDetail(mathPalletCode, barCode, matchPalletPlanNo, productBarCodes, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract string AddAssertedAndDetail(string mathPalletCode, string barCode, string matchPalletPlanNo, string productBarCodes, Ice.Current current__);

        public string CreateAssortedBillByScanBarcode(string uniqueId, string matchPalletCode, string matchPalletPlanNo, string assortedProductModels)
        {
            return CreateAssortedBillByScanBarcode(uniqueId, matchPalletCode, matchPalletPlanNo, assortedProductModels, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract string CreateAssortedBillByScanBarcode(string uniqueId, string matchPalletCode, string matchPalletPlanNo, string assortedProductModels, Ice.Current current__);

        public string GetAssortedBillByBarcode(string barcode)
        {
            return GetAssortedBillByBarcode(barcode, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract string GetAssortedBillByBarcode(string barcode, Ice.Current current__);

        public string GetFormulaOut(string formulaCode, int page, int start, int limit, string sort, string filter)
        {
            return GetFormulaOut(formulaCode, page, start, limit, sort, filter, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract string GetFormulaOut(string formulaCode, int page, int start, int limit, string sort, string filter, Ice.Current current__);

        public string GetFormulaOutDetail(string formulaCode)
        {
            return GetFormulaOutDetail(formulaCode, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract string GetFormulaOutDetail(string formulaCode, Ice.Current current__);

        public string UpdateFormulaOutDetail(string formulaCode, string data)
        {
            return UpdateFormulaOutDetail(formulaCode, data, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract string UpdateFormulaOutDetail(string formulaCode, string data, Ice.Current current__);

        #endregion

        #region Slice type-related members

        public static new readonly string[] ids__ = 
        {
            "::Ice::Object",
            "::PDA::PDAService"
        };

        public override bool ice_isA(string s)
        {
            return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override bool ice_isA(string s, Ice.Current current__)
        {
            return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids()
        {
            return ids__;
        }

        public override string[] ice_ids(Ice.Current current__)
        {
            return ids__;
        }

        public override string ice_id()
        {
            return ids__[1];
        }

        public override string ice_id(Ice.Current current__)
        {
            return ids__[1];
        }

        public static new string ice_staticId()
        {
            return ids__[1];
        }

        #endregion

        #region Operation dispatch

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus GetFacturers___(PDAService obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Idempotent, current__.mode);
            inS__.istr().skipEmptyEncaps();
            IceInternal.BasicStream os__ = inS__.ostr();
            string ret__ = obj__.GetFacturers(current__);
            os__.writeString(ret__);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus ApplyStoreIn___(PDAService obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.istr();
            is__.startReadEncaps();
            string productCode;
            productCode = is__.readString();
            string billTypeCode;
            billTypeCode = is__.readString();
            string barcode;
            barcode = is__.readString();
            string inBatch;
            inBatch = is__.readString();
            is__.endReadEncaps();
            IceInternal.BasicStream os__ = inS__.ostr();
            string ret__ = obj__.ApplyStoreIn(productCode, billTypeCode, barcode, inBatch, current__);
            os__.writeString(ret__);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus ApplyStoreOut___(PDAService obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.istr();
            is__.startReadEncaps();
            string productCode;
            productCode = is__.readString();
            string billTypeCode;
            billTypeCode = is__.readString();
            string barcode;
            barcode = is__.readString();
            string inBatch;
            inBatch = is__.readString();
            is__.endReadEncaps();
            IceInternal.BasicStream os__ = inS__.ostr();
            string ret__ = obj__.ApplyStoreOut(productCode, billTypeCode, barcode, inBatch, current__);
            os__.writeString(ret__);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus ApplyRelocation___(PDAService obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.istr();
            is__.startReadEncaps();
            string productCode;
            productCode = is__.readString();
            string billTypeCode;
            billTypeCode = is__.readString();
            string barcode;
            barcode = is__.readString();
            is__.endReadEncaps();
            IceInternal.BasicStream os__ = inS__.ostr();
            string ret__ = obj__.ApplyRelocation(productCode, billTypeCode, barcode, current__);
            os__.writeString(ret__);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus GetPalletByBarcode___(PDAService obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Idempotent, current__.mode);
            IceInternal.BasicStream is__ = inS__.istr();
            is__.startReadEncaps();
            string barcode;
            barcode = is__.readString();
            is__.endReadEncaps();
            IceInternal.BasicStream os__ = inS__.ostr();
            string ret__ = obj__.GetPalletByBarcode(barcode, current__);
            os__.writeString(ret__);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus GetMatchPalletPlan___(PDAService obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Idempotent, current__.mode);
            IceInternal.BasicStream is__ = inS__.istr();
            is__.startReadEncaps();
            string matchPalletPlanNo;
            matchPalletPlanNo = is__.readString();
            int page;
            page = is__.readInt();
            int start;
            start = is__.readInt();
            int limit;
            limit = is__.readInt();
            string sort;
            sort = is__.readString();
            string filter;
            filter = is__.readString();
            is__.endReadEncaps();
            IceInternal.BasicStream os__ = inS__.ostr();
            string ret__ = obj__.GetMatchPalletPlan(matchPalletPlanNo, page, start, limit, sort, filter, current__);
            os__.writeString(ret__);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus GetMatchPalletPlanDetail___(PDAService obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Idempotent, current__.mode);
            IceInternal.BasicStream is__ = inS__.istr();
            is__.startReadEncaps();
            string matchPalletCode;
            matchPalletCode = is__.readString();
            int page;
            page = is__.readInt();
            int start;
            start = is__.readInt();
            int limit;
            limit = is__.readInt();
            string sort;
            sort = is__.readString();
            string filter;
            filter = is__.readString();
            is__.endReadEncaps();
            IceInternal.BasicStream os__ = inS__.ostr();
            string ret__ = obj__.GetMatchPalletPlanDetail(matchPalletCode, page, start, limit, sort, filter, current__);
            os__.writeString(ret__);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus AddAssertedAndDetail___(PDAService obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.istr();
            is__.startReadEncaps();
            string mathPalletCode;
            mathPalletCode = is__.readString();
            string barCode;
            barCode = is__.readString();
            string matchPalletPlanNo;
            matchPalletPlanNo = is__.readString();
            string productBarCodes;
            productBarCodes = is__.readString();
            is__.endReadEncaps();
            IceInternal.BasicStream os__ = inS__.ostr();
            string ret__ = obj__.AddAssertedAndDetail(mathPalletCode, barCode, matchPalletPlanNo, productBarCodes, current__);
            os__.writeString(ret__);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus CreateAssortedBillByScanBarcode___(PDAService obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.istr();
            is__.startReadEncaps();
            string uniqueId;
            uniqueId = is__.readString();
            string matchPalletCode;
            matchPalletCode = is__.readString();
            string matchPalletPlanNo;
            matchPalletPlanNo = is__.readString();
            string assortedProductModels;
            assortedProductModels = is__.readString();
            is__.endReadEncaps();
            IceInternal.BasicStream os__ = inS__.ostr();
            string ret__ = obj__.CreateAssortedBillByScanBarcode(uniqueId, matchPalletCode, matchPalletPlanNo, assortedProductModels, current__);
            os__.writeString(ret__);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus GetAssortedBillByBarcode___(PDAService obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Idempotent, current__.mode);
            IceInternal.BasicStream is__ = inS__.istr();
            is__.startReadEncaps();
            string barcode;
            barcode = is__.readString();
            is__.endReadEncaps();
            IceInternal.BasicStream os__ = inS__.ostr();
            string ret__ = obj__.GetAssortedBillByBarcode(barcode, current__);
            os__.writeString(ret__);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus GetFormulaOut___(PDAService obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Idempotent, current__.mode);
            IceInternal.BasicStream is__ = inS__.istr();
            is__.startReadEncaps();
            string formulaCode;
            formulaCode = is__.readString();
            int page;
            page = is__.readInt();
            int start;
            start = is__.readInt();
            int limit;
            limit = is__.readInt();
            string sort;
            sort = is__.readString();
            string filter;
            filter = is__.readString();
            is__.endReadEncaps();
            IceInternal.BasicStream os__ = inS__.ostr();
            string ret__ = obj__.GetFormulaOut(formulaCode, page, start, limit, sort, filter, current__);
            os__.writeString(ret__);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus GetFormulaOutDetail___(PDAService obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Idempotent, current__.mode);
            IceInternal.BasicStream is__ = inS__.istr();
            is__.startReadEncaps();
            string formulaCode;
            formulaCode = is__.readString();
            is__.endReadEncaps();
            IceInternal.BasicStream os__ = inS__.ostr();
            string ret__ = obj__.GetFormulaOutDetail(formulaCode, current__);
            os__.writeString(ret__);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus UpdateFormulaOutDetail___(PDAService obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.istr();
            is__.startReadEncaps();
            string formulaCode;
            formulaCode = is__.readString();
            string data;
            data = is__.readString();
            is__.endReadEncaps();
            IceInternal.BasicStream os__ = inS__.ostr();
            string ret__ = obj__.UpdateFormulaOutDetail(formulaCode, data, current__);
            os__.writeString(ret__);
            return Ice.DispatchStatus.DispatchOK;
        }

        private static string[] all__ =
        {
            "AddAssertedAndDetail",
            "ApplyRelocation",
            "ApplyStoreIn",
            "ApplyStoreOut",
            "CreateAssortedBillByScanBarcode",
            "GetAssortedBillByBarcode",
            "GetFacturers",
            "GetFormulaOut",
            "GetFormulaOutDetail",
            "GetMatchPalletPlan",
            "GetMatchPalletPlanDetail",
            "GetPalletByBarcode",
            "UpdateFormulaOutDetail",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping"
        };

        public override Ice.DispatchStatus dispatch__(IceInternal.Incoming inS__, Ice.Current current__)
        {
            int pos = _System.Array.BinarySearch(all__, current__.operation, IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return AddAssertedAndDetail___(this, inS__, current__);
                }
                case 1:
                {
                    return ApplyRelocation___(this, inS__, current__);
                }
                case 2:
                {
                    return ApplyStoreIn___(this, inS__, current__);
                }
                case 3:
                {
                    return ApplyStoreOut___(this, inS__, current__);
                }
                case 4:
                {
                    return CreateAssortedBillByScanBarcode___(this, inS__, current__);
                }
                case 5:
                {
                    return GetAssortedBillByBarcode___(this, inS__, current__);
                }
                case 6:
                {
                    return GetFacturers___(this, inS__, current__);
                }
                case 7:
                {
                    return GetFormulaOut___(this, inS__, current__);
                }
                case 8:
                {
                    return GetFormulaOutDetail___(this, inS__, current__);
                }
                case 9:
                {
                    return GetMatchPalletPlan___(this, inS__, current__);
                }
                case 10:
                {
                    return GetMatchPalletPlanDetail___(this, inS__, current__);
                }
                case 11:
                {
                    return GetPalletByBarcode___(this, inS__, current__);
                }
                case 12:
                {
                    return UpdateFormulaOutDetail___(this, inS__, current__);
                }
                case 13:
                {
                    return ice_id___(this, inS__, current__);
                }
                case 14:
                {
                    return ice_ids___(this, inS__, current__);
                }
                case 15:
                {
                    return ice_isA___(this, inS__, current__);
                }
                case 16:
                {
                    return ice_ping___(this, inS__, current__);
                }
            }

            _System.Diagnostics.Debug.Assert(false);
            throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
        }

        #endregion

        #region Marshaling support

        public override void write__(IceInternal.BasicStream os__)
        {
            os__.writeTypeId(ice_staticId());
            os__.startWriteSlice();
            os__.endWriteSlice();
            base.write__(os__);
        }

        public override void read__(IceInternal.BasicStream is__, bool rid__)
        {
            if(rid__)
            {
                /* string myId = */ is__.readTypeId();
            }
            is__.startReadSlice();
            is__.endReadSlice();
            base.read__(is__, true);
        }

        public override void write__(Ice.OutputStream outS__)
        {
            Ice.MarshalException ex = new Ice.MarshalException();
            ex.reason = "type PDA::PDAService was not generated with stream support";
            throw ex;
        }

        public override void read__(Ice.InputStream inS__, bool rid__)
        {
            Ice.MarshalException ex = new Ice.MarshalException();
            ex.reason = "type PDA::PDAService was not generated with stream support";
            throw ex;
        }

        #endregion
    }
}
